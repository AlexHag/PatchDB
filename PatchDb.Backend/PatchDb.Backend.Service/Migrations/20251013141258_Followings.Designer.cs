// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatchDb.Backend.Service;

#nullable disable

namespace PatchDb.Backend.Service.Migrations
{
    [DbContext(typeof(ServiceDbContext))]
    [Migration("20251013141258_Followings")]
    partial class Followings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("PatchDb.Backend.Service.Following.Models.Entities.FollowingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FollowingUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FollowingUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("PatchDb.Backend.Service.PatchSubmittion.Models.Entities.PatchSubmittionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LastUpdatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatchMaker")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PatchNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UniversityCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniversitySection")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UploadedByUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PatchSubmittions");
                });

            modelBuilder.Entity("PatchDb.Backend.Service.Patches.Models.Entities.PatchEntity", b =>
                {
                    b.Property<int?>("PatchNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatchMaker")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PatchSubmissionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniversityCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniversitySection")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("PatchNumber");

                    b.ToTable("Patches");
                });

            modelBuilder.Entity("PatchDb.Backend.Service.User.Models.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("FollowersCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FollowingCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UniversityCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniversityProgram")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PatchDb.Backend.Service.UserPatches.Models.Entities.UserPatchEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatchNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatchNumber");

                    b.ToTable("UserPatches");
                });

            modelBuilder.Entity("PatchDb.Backend.Service.UserPatches.Models.Entities.UserPatchUploadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserPatchEntityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserPatchId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserPatchEntityId");

                    b.HasIndex("UserPatchId");

                    b.ToTable("UserPatchUploads");
                });

            modelBuilder.Entity("PatchDb.Backend.Service.Following.Models.Entities.FollowingEntity", b =>
                {
                    b.HasOne("PatchDb.Backend.Service.User.Models.Entities.UserEntity", "FollowingUser")
                        .WithMany()
                        .HasForeignKey("FollowingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatchDb.Backend.Service.User.Models.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollowingUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatchDb.Backend.Service.UserPatches.Models.Entities.UserPatchEntity", b =>
                {
                    b.HasOne("PatchDb.Backend.Service.Patches.Models.Entities.PatchEntity", "Patch")
                        .WithMany()
                        .HasForeignKey("PatchNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patch");
                });

            modelBuilder.Entity("PatchDb.Backend.Service.UserPatches.Models.Entities.UserPatchUploadEntity", b =>
                {
                    b.HasOne("PatchDb.Backend.Service.UserPatches.Models.Entities.UserPatchEntity", null)
                        .WithMany("Uploads")
                        .HasForeignKey("UserPatchEntityId");

                    b.HasOne("PatchDb.Backend.Service.UserPatches.Models.Entities.UserPatchEntity", "UserPatch")
                        .WithMany()
                        .HasForeignKey("UserPatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("UserPatch");
                });

            modelBuilder.Entity("PatchDb.Backend.Service.UserPatches.Models.Entities.UserPatchEntity", b =>
                {
                    b.Navigation("Uploads");
                });
#pragma warning restore 612, 618
        }
    }
}
